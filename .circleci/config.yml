version: 2.1

jobs:
  pre-build:
    description: A check that doesn't need every supported Python version (e.g., code style checks)
    parameters:
      command-run:
        type: string
    docker:
      # Pick the highest Python 3.x version that this project is known to support
      - image: cimg/python:3.10
    steps:
      - checkout
      - run:
          working_directory: ~/project/
          command: << parameters.command-run >>

  build-python:
    parameters:
      python-version:
        type: string
    docker:
      - image: cimg/python:<< parameters.python-version >>
    steps:
      - checkout
      - run:
          # Test that we can build a source distribution that can correctly
          # install from clean slate.
          name: Build source distribution and install package from it
          working_directory: ~/project/
          command: |
              pip install --progress-bar off --upgrade pip setuptools build && \
              python -m build && \
              pip install dist/`ls dist/ | grep .whl`
      - run:
          name: Install the full development requirements
          working_directory: ~/project/
          command: pip install --progress-bar off -r dev-requirements.txt
      - run:
          name: Show installed Python packages
          command: pip list -v
      - run:
          name: Run python tests
          working_directory: ~/
          # Avoid being able to import the package by relative import.
          # Test code by importing the *installed* package in site-packages.
          command: |
              pytest -vv --durations=0 --junitxml=/tmp/testxml/report.xml project/civis_jupyter_notebooks
      - store_test_results:
          path: /tmp/testxml/
      - setup_remote_docker
      - run:
          name: Test Docker image build
          working_directory: ~/project/
          command: |
            if [ << parameters.python-version >> = 3.10 ]
            then
                ./tests/run_docker_tests.sh tests/Dockerfile
            fi

workflows:
  version: 2
  build-and-test:
    jobs:
      - pre-build:
          name: flake8
          command-run: |
            pip install -r dev-requirements.txt && \
            flake8 civis_jupyter_notebooks
      - pre-build:
          name: twine
          command-run: |
            pip install --upgrade twine build && \
            python -m build && \
            twine check dist/`ls dist/ | grep .tar.gz` && \
            twine check dist/`ls dist/ | grep .whl`
      - pre-build:
          name: safety
          command-run: |
            pip install -e . && \
            pip install --upgrade safety && \
            safety --version && \
            safety check
      - pre-build:
          name: bandit
          command-run: |
            pip install --upgrade bandit && \
            bandit --version && \
            bandit -r civis_jupyter_notebooks -x civis_jupyter_notebooks/tests
      - build-python:
          requires:
            - flake8
            - twine
            - safety
            - bandit
          matrix:
            parameters:
              python-version: ["3.8", "3.9", "3.10", "3.11"]
